# Docker Compose Bake Configuration
x-bake:
  &default-bake
  platforms:
    - linux/amd64
    - linux/arm64

services:
  # Test Service
  test:
    build:
      context: .
      dockerfile: Dockerfile.test
      <<: *default-bake
    environment:
      - TESTING=true
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - db

  # Database Service
  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=faraday
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Migration Service
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
      <<: *default-bake
    command: alembic upgrade head
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/app:/app/models:/app/models/physical_education:/app/models/routine
    volumes:
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
      - ./app:/app/app:delegated
    depends_on:
      - app
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Core Platform Services
  app:
    build:
      context: .
      dockerfile: Dockerfile
      <<: *default-bake
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET:-faraday-media}
      - ENABLE_METRICS=true
      - METRICS_PORT=${APP_METRICS_PORT:-9091}
      - WORKERS=2
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONIOENCODING=utf-8
      - PYTHONHASHSEED=0
      - PORT=8000
      - TESTING=true
    ports:
      - "${APP_PORT:-8000}:${APP_PORT:-8000}"
      - "${APP_METRICS_PORT:-9091}:${APP_METRICS_PORT:-9091}"
      - "${APP_WEBSOCKET_PORT:-9100}:${APP_WEBSOCKET_PORT:-9100}"
    volumes:
      - ./app:/app/app
      - ./models:/app/models
      - ./static:/app/static
      - ./exports:/app/exports
      - ./tests:/app/tests
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Export Service
  exports:
    build:
      context: .
      dockerfile: Dockerfile
      <<: *default-bake
    command: python -m app.services.export.export_worker
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./exports:/app/exports
    depends_on:
      - db
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Physical Education Services
  pe-movement-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
      <<: *default-bake
    command: python -m app.services.physical_education.movement_analyzer
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/app:/app/models:/app/models/physical_education:/app/models/routine
      - LOG_LEVEL=INFO
      - MODEL_DIR=/app/models
    depends_on:
      - db
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4

  pe-video-processor:
    build:
      context: .
      dockerfile: Dockerfile
      <<: *default-bake
    command: python -m app.services.physical_education.video_processor
    volumes:
      - .:/app:delegated
      - ./models:/app/models
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/app:/app/models:/app/models/physical_education:/app/models/routine
      - LOG_LEVEL=INFO
      - MODEL_DIR=/app/models
    depends_on:
      - db
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Redis Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    depends_on:
      - app
    dns:
      - 8.8.8.8
      - 8.8.4.4

  grafana:
    image: grafana/grafana:10.0.0
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    dns:
      - 8.8.8.8
      - 8.8.4.4

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      <<: *default-bake
    command: celery -A app.worker worker --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./app:/app/app
    depends_on:
      - db
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      <<: *default-bake
    command: celery -A app.worker beat --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./app:/app/app
    depends_on:
      - db
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  faraday-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16 