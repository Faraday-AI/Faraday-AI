services:
  # Core Platform Services
  app:
    build: .
    ports:
      - "8000:8000"
      - "9091:9090"
      - "9100:9100"
    environment:
      - API_PORT=8000
      - METRICS_PORT=9090
      - WEBSOCKET_PORT=9100
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - MINIO_URL=minio:9002
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_BUCKET=faraday-media
      - ENABLE_METRICS=true
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MODEL_DIR=/app/models
      - LOG_DIR=/app/logs
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
    volumes:
      - ./static:/app/static
      - ./models:/app/models
      - ./logs:/app/logs
      - ./exports:/app/exports
    depends_on:
      - redis
      - minio
      - prometheus
      - grafana
      - exports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - faraday-network

  # Export Service
  exports:
    build: .
    command: python -m app.services.export_service
    volumes:
      - ./exports:/app/exports
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - LOG_DIR=/app/logs
    depends_on:
      - redis
    networks:
      - faraday-network

  # Database Service
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-faraday}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - faraday-network

  # Model Training Service
  train:
    build:
      context: .
      dockerfile: Dockerfile.train
    environment:
      - MODEL_DIR=/app/models
      - LOG_DIR=/app/logs
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - faraday-network

  # Shared Cache
  redis:
    image: redis:alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - faraday-network

  # Shared File Storage
  minio:
    image: minio/minio
    ports:
      - "9002:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - faraday-network

  # Monitoring
  prometheus:
    image: prom/prometheus
    ports:
      - "9091:9090"
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - faraday-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - faraday-network

  # PE-Specific Services
  pe-video-processor:
    build: 
      context: .
      dockerfile: Dockerfile.video
    environment:
      - OPENCV_FFMPEG_CAPTURE_OPTIONS=rtsp_transport;tcp
      - SERVICE_TYPE=pe
      - LOG_DIR=/app/logs
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    depends_on:
      - redis
      - minio
    networks:
      - faraday-network

  pe-movement-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.movement
    environment:
      - MODEL_DIR=/app/models
      - LOG_DIR=/app/logs
      - SERVICE_TYPE=pe
    volumes:
      - media_volume:/app/media
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis
      - pe-video-processor
    networks:
      - faraday-network
    command: >
      sh -c "
        if [ \"$$TRAIN_MODEL\" = \"true\" ]; then
          python models/train_movement_analysis.py;
        else
          python -m app.services.movement_analyzer;
        fi
      "

  # JSON to Video Converter
  json-to-video:
    build:
      context: .
      dockerfile: Dockerfile.movement
    volumes:
      - ./data:/app/data
      - ./scripts:/app/scripts
    command: python scripts/json_to_video.py
    networks:
      - faraday-network

volumes:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  media_volume:
  postgres_data:

networks:
  faraday-network:
    driver: bridge 