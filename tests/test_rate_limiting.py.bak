import pytest
from datetime import datetime, timedelta
from fastapi import HTTPException
from app.main import update_user_streak, USER_STREAKS

@pytest.mark.asyncio
async def test_rate_limiting():
    """Test rate limiting for streak updates"""
    user_id = "test_rate_limit_user"
    USER_STREAKS[user_id] = {
        "current_streak": 1,
        "last_active": datetime.now() - timedelta(minutes=5),  # Too recent
        "max_streak": 1,
        "tier": 1,
        "tier_progress": 0,
        "recovery_mode": False,
        "recovery_progress": 0,
        "recovery_multiplier": 1.0,
        "grace_days": 2,
        "grace_used": 0,
        "bonus_points": 0,
        "tier_thresholds": [7, 15, 30, 60],
        "tier_names": ["Bronze", "Silver", "Gold", "Diamond"],
        "activity_history": []
    }
    
    with pytest.raises(HTTPException) as exc_info:
        await update_user_streak(user_id)
    assert exc_info.value.status_code == 429
    assert "Rate limit exceeded" in str(exc_info.value.detail)

@pytest.mark.asyncio
async def test_regular_streak_update():
    """Test regular daily streak update"""
    user_id = "test_user"
    USER_STREAKS[user_id] = {
        "current_streak": 10,
        "last_active": datetime.now() - timedelta(hours=25),  # More than 24 hours
        "max_streak": 10,
        "tier": 1,
        "tier_progress": 0,
        "recovery_mode": False,
        "recovery_progress": 0,
        "recovery_multiplier": 1.0,
        "grace_days": 2,
        "grace_used": 0,
        "bonus_points": 0,
        "tier_thresholds": [7, 15, 30, 60],
        "tier_names": ["Bronze", "Silver", "Gold", "Diamond"],
        "activity_history": []
    }
    
    updated = await update_user_streak(user_id)
    assert updated["current_streak"] == 11

@pytest.mark.asyncio
async def test_grace_period():
    """Test grace period functionality"""
    user_id = "test_user"
    USER_STREAKS[user_id] = {
        "current_streak": 10,
        "last_active": datetime.now() - timedelta(hours=30),  # Within grace period
        "max_streak": 10,
        "tier": 1,
        "tier_progress": 0,
        "recovery_mode": False,
        "recovery_progress": 0,
        "recovery_multiplier": 1.0,
        "grace_days": 2,
        "grace_used": 0,
        "bonus_points": 0,
        "tier_thresholds": [7, 15, 30, 60],
        "tier_names": ["Bronze", "Silver", "Gold", "Diamond"],
        "activity_history": []
    }
    
    updated = await update_user_streak(user_id)
    assert updated["current_streak"] == 10  # Streak preserved
    assert updated["grace_used"] == 1 
